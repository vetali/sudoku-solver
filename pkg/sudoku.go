package pkg

import (
	"errors"
	"fmt"
	"github.com/vetali/sudoku/internal"
)

type OptionSet map[int]struct{}

type Sudoku struct {
	cells      [81]int
	initMask   [81]byte
	options    [81]OptionSet
	rows       [9][9]int
	cols       [9][9]int
	boxes      [9][9]int
	related    [81][20]int
	CluesCount int
	Level      string
}

func (s *Sudoku) IsValid() bool {
	err := s.Validate()
	return err == nil
}

func (s *Sudoku) Validate() error {
	for _, group := range s.boxes {
		err := s.validateGroup(group)
		if err != nil {
			return err
		}
	}
	for _, group := range s.rows {
		err := s.validateGroup(group)
		if err != nil {
			return err
		}
	}
	for _, group := range s.cols {
		err := s.validateGroup(group)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s *Sudoku) validateGroup(cellsGroup [9]int) error {
	var seen = make(OptionSet)
	for _, idx := range cellsGroup {
		val := s.cells[idx]
		if val > 0 {
			if _, ok := seen[val]; ok == true {
				return errors.New(fmt.Sprintf("Duplicate cell %d with value %d", idx, val))
			} else {
				seen[val] = struct{}{}
			}
		}
	}
	return nil
}

func (s *Sudoku) updateOptions() int {
	changes := 0
	for i, _ := range s.options {
		if s.cells[i] > 0 {
			changes += len(s.options[i])
			//has no options since the value is set
			s.options[i] = make(OptionSet)
			//remove this value from all related cells
			for _, r := range s.related[i] {
				delete(s.options[r], s.cells[i])
			}
		} else {
			//Naked Singles: set the value if only one option present
			if len(s.options[i]) == 1 {
				var key int
				for k, _ := range s.options[i] {
					key = k
					break
				}
				s.cells[i] = key
				s.options[i] = make(OptionSet)
				changes += 1
			} else {
				//collect all set values from related cells
				for _, r := range s.related[i] {
					if s.cells[r] > 0 {
						_, ok := s.options[i][s.cells[r]]
						if ok {
							changes += 1
						}
						delete(s.options[i], s.cells[r])
					}
				}
			}
		}
	}

	return changes
}

func (s *Sudoku) Print() {
	solved := true
	fmt.Printf("Initial Clues: %v \n", s.CluesCount)
	fmt.Printf("Level: %s \n", s.Level)
	for i, v := range s.cells {
		if v > 0 {
			fmt.Printf(" %v ", v)
		} else {
			solved = false
			fmt.Print(" _ ")
		}
		if (i+1)%9 == 0 {
			fmt.Printf("\n")
		}
	}
	var found = 0
	if !solved {
		for i, options := range s.options {
			if s.cells[i] > 0 {
				found += 1
			}
			fmt.Printf("%d -> %+v \n", i, internal.GetKeys(options))
		}
		fmt.Printf("Found cells: %v \n", found)
	}

}

func (s *Sudoku) GetValues() []int {
	return s.cells[:]
}

func (s *Sudoku) Solve(debug bool) error {
	var changes = 1
	for changes > 0 {
		if err := s.Validate(); err != nil {
			return errors.New(fmt.Sprintf("invalid sudoku: %v", err))
		}
		changes = s.updateOptions()
		if debug == true {
			s.Print()
		}
	}

	return nil
}

func NewSudoku(initialValues [81]int) *Sudoku {
	var mask [81]byte
	var options [81]OptionSet
	var cluesCount int
	for i := 0; i < 81; i++ {
		if initialValues[i] > 0 {
			cluesCount += 1
			mask[i] = 1
			options[i] = make(OptionSet)
		} else {
			options[i] = OptionSet{1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}}
		}
	}
	var level string
	switch {
	case cluesCount > 35:
		level = "Easy"
	case cluesCount > 32:
		level = "Medium"
	case cluesCount > 25:
		level = "Hard"
	case cluesCount >= 18:
		level = "Master"
	default:
		level = "Multiple Solutions"
	}

	sudoku := &Sudoku{
		Level:      level,
		CluesCount: cluesCount,
		cells:      initialValues,
		initMask:   mask,
		options:    options,
		related: [81][20]int{
			{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63, 72},  //0
			{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 28, 37, 46, 55, 64, 73},  //1
			{0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 29, 38, 47, 56, 65, 74},  //2
			{0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 30, 39, 48, 57, 66, 75}, //3
			{0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 31, 40, 49, 58, 67, 76}, //4
			{0, 1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 21, 22, 23, 32, 41, 50, 59, 68, 77}, //5
			{0, 1, 2, 3, 4, 5, 7, 8, 15, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78}, //6
			{0, 1, 2, 3, 4, 5, 6, 8, 15, 16, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79}, //7
			{0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 24, 25, 26, 35, 44, 53, 62, 71, 80}, //8

			{0, 1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 36, 45, 54, 63, 72}, //9
			{0, 1, 2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 37, 46, 55, 64, 73},  //10
			{0, 1, 2, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 38, 47, 56, 65, 74},  //11
			{3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 30, 39, 48, 57, 66, 75},  //12
			{3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 31, 40, 49, 58, 67, 76},  //13
			{3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 32, 41, 50, 59, 68, 77},  //14
			{6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78},  //15
			{6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79},  //16
			{6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 35, 44, 53, 62, 71, 80},  //17

			{0, 1, 2, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 45, 54, 63, 72},  //18
			{0, 1, 2, 9, 10, 11, 18, 20, 21, 22, 23, 24, 25, 26, 28, 37, 46, 55, 64, 73},  //19
			{0, 1, 2, 9, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 29, 38, 47, 56, 65, 74},  //20
			{3, 4, 5, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 26, 30, 39, 48, 57, 66, 75}, //21
			{3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 31, 40, 49, 58, 67, 76}, //22
			{3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 32, 41, 50, 59, 68, 77}, //23
			{6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 33, 42, 51, 60, 69, 78}, //24
			{6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 34, 43, 52, 61, 70, 79}, //25
			{6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 44, 53, 62, 71, 80}, //26

			{0, 9, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 54, 63, 72},  //27
			{1, 10, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 55, 64, 73}, //28
			{2, 11, 20, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 56, 65, 74}, //29
			{3, 12, 21, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 57, 66, 75}, //30
			{4, 13, 22, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 58, 67, 76}, //31
			{6, 14, 23, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 48, 49, 50, 59, 68, 77}, //32
			{6, 15, 24, 27, 28, 29, 30, 31, 32, 34, 35, 42, 43, 44, 51, 52, 53, 60, 69, 78}, //33
			{7, 16, 25, 27, 28, 29, 30, 31, 32, 33, 35, 42, 43, 44, 51, 52, 53, 61, 70, 79}, //34
			{8, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 43, 44, 51, 52, 53, 62, 71, 80}, //35

			{0, 9, 18, 27, 28, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 63, 72},  //36
			{1, 10, 19, 27, 28, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 64, 73}, //37
			{2, 11, 20, 27, 28, 29, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 65, 74}, //38
			{3, 12, 21, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 57, 66, 75}, //39
			{4, 13, 22, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 50, 58, 67, 76}, //40
			{5, 14, 23, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 59, 68, 77}, //41
			{6, 15, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 51, 52, 53, 60, 69, 78}, //42
			{7, 16, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 53, 61, 70, 79}, //43
			{8, 17, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 62, 71, 80}, //44

			{0, 9, 18, 27, 28, 29, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72},  //45
			{1, 10, 19, 27, 28, 29, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 55, 64, 73}, //46
			{2, 11, 20, 27, 28, 29, 36, 37, 38, 45, 46, 48, 49, 50, 51, 52, 53, 56, 65, 74}, //47
			{3, 12, 21, 30, 31, 32, 39, 40, 41, 45, 46, 47, 49, 50, 51, 52, 53, 57, 66, 75}, //48
			{4, 13, 22, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 58, 67, 76}, //49
			{5, 14, 23, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 59, 68, 77}, //50
			{6, 15, 24, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 60, 69, 78}, //51
			{7, 16, 25, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 61, 70, 79}, //52
			{8, 17, 26, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 62, 71, 80}, //53

			{0, 9, 18, 27, 36, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 72, 74},  //54
			{1, 10, 19, 28, 37, 46, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74}, //55
			{2, 11, 20, 29, 38, 47, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74}, //56
			{3, 12, 21, 30, 39, 48, 54, 55, 56, 58, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77}, //57
			{4, 13, 22, 31, 40, 49, 54, 55, 56, 57, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77}, //58
			{5, 14, 23, 32, 41, 50, 54, 55, 56, 57, 58, 60, 61, 62, 66, 67, 68, 75, 76, 77}, //59
			{6, 15, 24, 33, 42, 51, 54, 55, 56, 57, 58, 59, 61, 62, 69, 70, 71, 78, 79, 80}, //60
			{7, 16, 25, 34, 43, 52, 54, 55, 56, 57, 58, 59, 60, 62, 69, 70, 71, 78, 79, 80}, //61
			{8, 17, 26, 35, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 78, 79, 80}, //62

			{}, //63
			{}, //64
			{}, //65
			{}, //66
			{}, //67
			{}, //68
			{}, //69
			{}, //70
			{}, //71

			{}, //72
			{}, //73
			{}, //74
			{}, //75
			{}, //76
			{}, //77
			{}, //78
			{}, //79
			{}, //80
		},
		rows: [9][9]int{
			{0, 1, 2, 3, 4, 5, 6, 7, 8},
			{9, 10, 11, 12, 13, 14, 15, 16, 17},
			{18, 19, 20, 21, 22, 23, 24, 25, 26},
			{27, 28, 29, 30, 31, 32, 33, 34, 35},
			{36, 37, 38, 39, 40, 41, 42, 43, 44},
			{45, 46, 47, 48, 49, 50, 51, 52, 53},
			{54, 55, 56, 57, 58, 59, 60, 61, 62},
			{63, 64, 65, 66, 67, 68, 69, 70, 71},
			{72, 73, 74, 75, 76, 77, 78, 79, 80},
		},
		cols: [9][9]int{
			{0, 9, 18, 27, 36, 45, 54, 63, 72},
			{1, 10, 19, 28, 37, 46, 55, 64, 73},
			{2, 11, 20, 29, 38, 47, 56, 65, 74},
			{3, 12, 21, 30, 39, 48, 57, 66, 75},
			{4, 13, 22, 31, 40, 49, 58, 67, 76},
			{5, 14, 23, 32, 41, 50, 59, 68, 77},
			{6, 15, 24, 33, 42, 51, 60, 69, 78},
			{7, 16, 25, 34, 43, 52, 61, 70, 79},
			{8, 17, 26, 35, 44, 53, 62, 71, 80},
		},
		boxes: [9][9]int{
			{0, 1, 2, 9, 10, 11, 18, 19, 20},
			{3, 4, 5, 12, 13, 14, 21, 22, 23},
			{6, 7, 8, 15, 16, 17, 24, 25, 26},
			{27, 28, 29, 36, 37, 38, 45, 46, 47},
			{30, 31, 32, 39, 40, 41, 48, 49, 50},
			{33, 34, 35, 42, 43, 44, 51, 52, 53},
			{54, 55, 56, 63, 64, 65, 72, 73, 74},
			{57, 58, 59, 66, 67, 68, 75, 76, 77},
			{60, 61, 62, 69, 70, 71, 78, 79, 80},
		},
	}
	return sudoku
}
